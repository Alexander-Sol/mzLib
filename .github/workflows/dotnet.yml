name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  #build:
    # runs-on: windows-latest
    # timeout-minutes: 15
    # steps:
    # - uses: actions/checkout@v2
    # - name: Set up .NET
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: 8.0.x
    # - name: Restore dependencies
    #   run: cd mzLib && dotnet restore
    # - name: Build
    #   run: cd mzLib && dotnet build --no-restore
    # - name: Build (Test)
    #   run: cd mzLib && dotnet build --no-restore ./Test/Test.csproj
    # - name: Build (TestFlashLFQ)
    #   run: cd mzLib && dotnet build --no-restore ./TestFlashLFQ/TestFlashLFQ.csproj
    # - name: Add coverlet collector (Test)
    #   run: cd mzLib && dotnet add Test/Test.csproj package coverlet.collector -v 6.0.2
    # - name: Add coverlet collector (TestFlashLFQ)
    #   run: cd mzLib && dotnet add TestFlashLFQ/TestFlashLFQ.csproj package coverlet.collector -v 6.0.2
    # - name: Test
    #   run: cd mzLib && dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" /p:CoverletOutputFormat=cobertura ./Test/Test.csproj
    # - name: TestFlashLFQ
    #   run: cd mzLib && dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" /p:CoverletOutputFormat=cobertura ./TestFlashLFQ/TestFlashLFQ.csproj
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v4
    #   env:
    #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    #     verbose: true
    #     files: mzLib/Test*/TestResults/*/coverage.cobertura.xml
  package:
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - name: Set up .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: cd mzLib && dotnet restore
    - name: Build
      run: cd mzLib && dotnet build --no-restore --configuration Release
    - name: Pack
      run: |
        cd mzLib && nuget pack mzLib.nuspec;
        $mzlibMatch = Select-String -Path mzLib.nuspec -Pattern "(?<=\<version\>)(.*)(?=\</version)";
        $mzlibVersion = $mzlibMatch.Matches[0].Value;
        nuget add "mzLib.$mzlibVersion.nupkg" -Source ../packages
    - name: Clone MetaMorpheus
      uses: actions/checkout@master
      with:
        path: ./MetaMorpheus
        repository: smith-chem-wisc/MetaMorpheus 
        ref: master
    - name: Delete mzLib dependencies
      run: |
        cd ./MetaMorpheus/MetaMorpheus;
        dotnet remove CMD package mzLib;
        dotnet remove GUI package mzLib;
        dotnet remove GuiFunctions package mzLib;
        dotnet remove EngineLayer package mzLib;
        dotnet remove Test package mzLib;
        dotnet remove TaskLayer package mzLib;
    - name: Delete mzLib, replace with local
      run: |
        cd mzLib;
        $mzlibMatch = Select-String -Path mzLib.nuspec -Pattern "(?<=\<version\>)(.*)(?=\</version)";
        $mzlibVersion = $mzlibMatch.Matches[0].Value;
        echo "mzLib version: $mzlibVersion";
        cd ../MetaMorpheus/MetaMorpheus;
        dotnet add CMD package mzLib -v $mzlibVersion -s ../../packages;
        dotnet add CMD package mzLib -v $mzlibVersion -s ../../packages;
        dotnet add GUI package mzLib -v $mzlibVersion -s ../../packages;
        dotnet add GuiFunctions package mzLib -v $mzlibVersion -s ../../packages;
        dotnet add EngineLayer package mzLib -v $mzlibVersion -s ../../packages;
        dotnet add Test package mzLib -v $mzlibVersion -s ../../packages;
        dotnet add TaskLayer package mzLib -v $mzlibVersion -s ../../packages;
        dotnet restore;
    - name: Build MetaMorpheus
      run: cd ./MetaMorpheus/MetaMorpheus && dotnet build --no-restore

